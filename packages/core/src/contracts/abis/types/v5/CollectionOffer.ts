/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type OfferStruct = {
  buyer: PromiseOrValue<string>;
  collection: PromiseOrValue<string>;
  isERC721: PromiseOrValue<boolean>;
  amount: PromiseOrValue<BigNumberish>;
  paymentToken: PromiseOrValue<string>;
  startTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  itemPrice: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  metadata: PromiseOrValue<string>;
};

export type OfferStructOutput = [
  string,
  string,
  boolean,
  BigNumber,
  string,
  number,
  number,
  BigNumber,
  BigNumber,
  string
] & {
  buyer: string;
  collection: string;
  isERC721: boolean;
  amount: BigNumber;
  paymentToken: string;
  startTime: number;
  endTime: number;
  itemPrice: BigNumber;
  nonce: BigNumber;
  metadata: string;
};

export type OrderStruct = {
  offerHash: PromiseOrValue<BytesLike>;
  seller: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  ids: PromiseOrValue<BigNumberish>[];
  amounts: PromiseOrValue<BigNumberish>[];
  unlockTime: PromiseOrValue<BigNumberish>;
  masterNonce: PromiseOrValue<BigNumberish>;
};

export type OrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber[],
  BigNumber[],
  BigNumber,
  BigNumber
] & {
  offerHash: string;
  seller: string;
  value: BigNumber;
  ids: BigNumber[];
  amounts: BigNumber[];
  unlockTime: BigNumber;
  masterNonce: BigNumber;
};

export type RecipientStruct = {
  recipient: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type RecipientStructOutput = [string, BigNumber] & {
  recipient: string;
  amount: BigNumber;
};

export declare namespace ICollectionOffer {
  export type FulfillmentInfoStruct = {
    lockedAmount: PromiseOrValue<BigNumberish>;
    fulfilledAmount: PromiseOrValue<BigNumberish>;
  };

  export type FulfillmentInfoStructOutput = [BigNumber, BigNumber] & {
    lockedAmount: BigNumber;
    fulfilledAmount: BigNumber;
  };

  export type OfferSettlementParamStruct = {
    offer: OfferStruct;
    ids: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
    buyerSig: PromiseOrValue<BytesLike>;
  };

  export type OfferSettlementParamStructOutput = [
    OfferStructOutput,
    BigNumber[],
    BigNumber[],
    string
  ] & {
    offer: OfferStructOutput;
    ids: BigNumber[];
    amounts: BigNumber[];
    buyerSig: string;
  };
}

export interface CollectionOfferInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GAS_FOR_NATIVE_TRANSFER()": FunctionFragment;
    "PERMIT_FULFILL_ORDER_TYPE_HASH()": FunctionFragment;
    "PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH()": FunctionFragment;
    "PERMIT_SETTLE_OFFER_TYPE_HASH()": FunctionFragment;
    "WRON()": FunctionFragment;
    "WRON_HELPER()": FunctionFragment;
    "cancelOffersAt(uint256[])": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "fulfillOrder((address,address,bool,uint64,address,uint40,uint40,uint80,uint256,string),(bytes32,address,uint256,uint256[],uint256[],uint256,uint256),uint256,uint256,bytes)": FunctionFragment;
    "getCommissionContract()": FunctionFragment;
    "getFulfillmentInfo(bytes32)": FunctionFragment;
    "getLockingPeriod()": FunctionFragment;
    "getMasterNonce()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoyaltyRegistry()": FunctionFragment;
    "getStateOf(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,uint64,address)": FunctionFragment;
    "initializeV2(address)": FunctionFragment;
    "invalidateUnorderedNonce(uint256,uint256)": FunctionFragment;
    "isUsedNonce(address,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "rejectBatchOrders((address,address,bool,uint64,address,uint40,uint40,uint80,uint256,string)[],(bytes32,address,uint256,uint256[],uint256[],uint256,uint256)[])": FunctionFragment;
    "rejectOrder((address,address,bool,uint64,address,uint40,uint40,uint80,uint256,string),(bytes32,address,uint256,uint256[],uint256[],uint256,uint256))": FunctionFragment;
    "releaseNonLockingOrder((address,address,bool,uint64,address,uint40,uint40,uint80,uint256,string),(bytes32,address,uint256,uint256[],uint256[],uint256,uint256))": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "settleBatchOffers(((address,address,bool,uint64,address,uint40,uint40,uint80,uint256,string),uint256[],uint256[],bytes)[],uint256,uint256,bytes)": FunctionFragment;
    "settleOffer(((address,address,bool,uint64,address,uint40,uint40,uint80,uint256,string),uint256[],uint256[],bytes),uint256,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "trustedVerifier()": FunctionFragment;
    "updateTrustedVerifier(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "GAS_FOR_NATIVE_TRANSFER"
      | "PERMIT_FULFILL_ORDER_TYPE_HASH"
      | "PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH"
      | "PERMIT_SETTLE_OFFER_TYPE_HASH"
      | "WRON"
      | "WRON_HELPER"
      | "cancelOffersAt"
      | "eip712Domain"
      | "fulfillOrder"
      | "getCommissionContract"
      | "getFulfillmentInfo"
      | "getLockingPeriod"
      | "getMasterNonce"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoyaltyRegistry"
      | "getStateOf"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "initializeV2"
      | "invalidateUnorderedNonce"
      | "isUsedNonce"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "rejectBatchOrders"
      | "rejectOrder"
      | "releaseNonLockingOrder"
      | "renounceRole"
      | "revokeRole"
      | "settleBatchOffers"
      | "settleOffer"
      | "supportsInterface"
      | "trustedVerifier"
      | "updateTrustedVerifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAS_FOR_NATIVE_TRANSFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_FULFILL_ORDER_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_SETTLE_OFFER_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WRON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRON_HELPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffersAt",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOrder",
    values: [
      OfferStruct,
      OrderStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFulfillmentInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMasterNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOf",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateUnorderedNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsedNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectBatchOrders",
    values: [OfferStruct[], OrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectOrder",
    values: [OfferStruct, OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseNonLockingOrder",
    values: [OfferStruct, OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBatchOffers",
    values: [
      ICollectionOffer.OfferSettlementParamStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOffer",
    values: [
      ICollectionOffer.OfferSettlementParamStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTrustedVerifier",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAS_FOR_NATIVE_TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_FULFILL_ORDER_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_SETTLE_OFFER_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WRON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRON_HELPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffersAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFulfillmentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMasterNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStateOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateUnorderedNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUsedNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectBatchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseNonLockingOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBatchOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTrustedVerifier",
    data: BytesLike
  ): Result;

  events: {
    "EIP712DomainChanged()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OfferCancelled(bytes32,address,tuple)": EventFragment;
    "OfferSettled(bytes32,address,tuple,uint256[],uint256[])": EventFragment;
    "OrderFulfilled(bytes32,tuple,tuple,tuple[],uint256)": EventFragment;
    "OrderLocked(bytes32,tuple,tuple,uint256)": EventFragment;
    "OrderReturned(bytes32,tuple,tuple,bool)": EventFragment;
    "OrderStateTransition(bytes32,uint8,uint8)": EventFragment;
    "OrderUnlocked(bytes32,tuple,tuple,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoyaltyRegistryUpdated(address)": EventFragment;
    "TrustedVerifierUpdated(address,address)": EventFragment;
    "UnorderedNonceInvalidation(address,uint256,uint256)": EventFragment;
    "UnorderedNonceUsed(bytes4,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderStateTransition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyRegistryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedVerifierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnorderedNonceInvalidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnorderedNonceUsed"): EventFragment;
}

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OfferCancelledEventObject {
  offerHash: string;
  by: string;
  offer: OfferStructOutput;
}
export type OfferCancelledEvent = TypedEvent<
  [string, string, OfferStructOutput],
  OfferCancelledEventObject
>;

export type OfferCancelledEventFilter = TypedEventFilter<OfferCancelledEvent>;

export interface OfferSettledEventObject {
  offerHash: string;
  by: string;
  offer: OfferStructOutput;
  ids: BigNumber[];
  amounts: BigNumber[];
}
export type OfferSettledEvent = TypedEvent<
  [string, string, OfferStructOutput, BigNumber[], BigNumber[]],
  OfferSettledEventObject
>;

export type OfferSettledEventFilter = TypedEventFilter<OfferSettledEvent>;

export interface OrderFulfilledEventObject {
  offerHash: string;
  offer: OfferStructOutput;
  order: OrderStructOutput;
  recipients: RecipientStructOutput[];
  newFulfilledAmount: BigNumber;
}
export type OrderFulfilledEvent = TypedEvent<
  [
    string,
    OfferStructOutput,
    OrderStructOutput,
    RecipientStructOutput[],
    BigNumber
  ],
  OrderFulfilledEventObject
>;

export type OrderFulfilledEventFilter = TypedEventFilter<OrderFulfilledEvent>;

export interface OrderLockedEventObject {
  offerHash: string;
  offer: OfferStructOutput;
  order: OrderStructOutput;
  newLockedAmount: BigNumber;
}
export type OrderLockedEvent = TypedEvent<
  [string, OfferStructOutput, OrderStructOutput, BigNumber],
  OrderLockedEventObject
>;

export type OrderLockedEventFilter = TypedEventFilter<OrderLockedEvent>;

export interface OrderReturnedEventObject {
  offerHash: string;
  offer: OfferStructOutput;
  order: OrderStructOutput;
  collectionReturnSuccess: boolean;
}
export type OrderReturnedEvent = TypedEvent<
  [string, OfferStructOutput, OrderStructOutput, boolean],
  OrderReturnedEventObject
>;

export type OrderReturnedEventFilter = TypedEventFilter<OrderReturnedEvent>;

export interface OrderStateTransitionEventObject {
  orderHash: string;
  from: number;
  to: number;
}
export type OrderStateTransitionEvent = TypedEvent<
  [string, number, number],
  OrderStateTransitionEventObject
>;

export type OrderStateTransitionEventFilter =
  TypedEventFilter<OrderStateTransitionEvent>;

export interface OrderUnlockedEventObject {
  offerHash: string;
  offer: OfferStructOutput;
  order: OrderStructOutput;
  newLockedAmount: BigNumber;
}
export type OrderUnlockedEvent = TypedEvent<
  [string, OfferStructOutput, OrderStructOutput, BigNumber],
  OrderUnlockedEventObject
>;

export type OrderUnlockedEventFilter = TypedEventFilter<OrderUnlockedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoyaltyRegistryUpdatedEventObject {
  royaltyRegistry: string;
}
export type RoyaltyRegistryUpdatedEvent = TypedEvent<
  [string],
  RoyaltyRegistryUpdatedEventObject
>;

export type RoyaltyRegistryUpdatedEventFilter =
  TypedEventFilter<RoyaltyRegistryUpdatedEvent>;

export interface TrustedVerifierUpdatedEventObject {
  by: string;
  newVerifier: string;
}
export type TrustedVerifierUpdatedEvent = TypedEvent<
  [string, string],
  TrustedVerifierUpdatedEventObject
>;

export type TrustedVerifierUpdatedEventFilter =
  TypedEventFilter<TrustedVerifierUpdatedEvent>;

export interface UnorderedNonceInvalidationEventObject {
  owner: string;
  word: BigNumber;
  mask: BigNumber;
}
export type UnorderedNonceInvalidationEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UnorderedNonceInvalidationEventObject
>;

export type UnorderedNonceInvalidationEventFilter =
  TypedEventFilter<UnorderedNonceInvalidationEvent>;

export interface UnorderedNonceUsedEventObject {
  sig: string;
  from: string;
  nonce: BigNumber;
}
export type UnorderedNonceUsedEvent = TypedEvent<
  [string, string, BigNumber],
  UnorderedNonceUsedEventObject
>;

export type UnorderedNonceUsedEventFilter =
  TypedEventFilter<UnorderedNonceUsedEvent>;

export interface CollectionOffer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectionOfferInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GAS_FOR_NATIVE_TRANSFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_FULFILL_ORDER_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PERMIT_SETTLE_OFFER_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    WRON(overrides?: CallOverrides): Promise<[string]>;

    WRON_HELPER(overrides?: CallOverrides): Promise<[string]>;

    cancelOffersAt(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    fulfillOrder(
      offer: OfferStruct,
      order: OrderStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommissionContract(overrides?: CallOverrides): Promise<[string]>;

    getFulfillmentInfo(
      offerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ICollectionOffer.FulfillmentInfoStructOutput]>;

    getLockingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMasterNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoyaltyRegistry(overrides?: CallOverrides): Promise<[string]>;

    getStateOf(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: PromiseOrValue<string>,
      commissionContract: PromiseOrValue<string>,
      lockingPeriod: PromiseOrValue<BigNumberish>,
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invalidateUnorderedNonce(
      wordPos: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUsedNonce(
      from: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rejectBatchOrders(
      offers: OfferStruct[],
      orders: OrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    releaseNonLockingOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBatchOffers(
      params: ICollectionOffer.OfferSettlementParamStruct[],
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleOffer(
      param: ICollectionOffer.OfferSettlementParamStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trustedVerifier(overrides?: CallOverrides): Promise<[string]>;

    updateTrustedVerifier(
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GAS_FOR_NATIVE_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_FULFILL_ORDER_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH(
    overrides?: CallOverrides
  ): Promise<string>;

  PERMIT_SETTLE_OFFER_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  WRON(overrides?: CallOverrides): Promise<string>;

  WRON_HELPER(overrides?: CallOverrides): Promise<string>;

  cancelOffersAt(
    nonces: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  fulfillOrder(
    offer: OfferStruct,
    order: OrderStruct,
    nonce: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommissionContract(overrides?: CallOverrides): Promise<string>;

  getFulfillmentInfo(
    offerHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ICollectionOffer.FulfillmentInfoStructOutput>;

  getLockingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getMasterNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoyaltyRegistry(overrides?: CallOverrides): Promise<string>;

  getStateOf(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: PromiseOrValue<string>,
    commissionContract: PromiseOrValue<string>,
    lockingPeriod: PromiseOrValue<BigNumberish>,
    trustedVerifier_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeV2(
    royaltyRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invalidateUnorderedNonce(
    wordPos: PromiseOrValue<BigNumberish>,
    mask: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUsedNonce(
    from: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  rejectBatchOrders(
    offers: OfferStruct[],
    orders: OrderStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectOrder(
    offer: OfferStruct,
    order: OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  releaseNonLockingOrder(
    offer: OfferStruct,
    order: OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBatchOffers(
    params: ICollectionOffer.OfferSettlementParamStruct[],
    nonce: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    verifierSig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleOffer(
    param: ICollectionOffer.OfferSettlementParamStruct,
    nonce: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    verifierSig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trustedVerifier(overrides?: CallOverrides): Promise<string>;

  updateTrustedVerifier(
    trustedVerifier_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GAS_FOR_NATIVE_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_FULFILL_ORDER_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<string>;

    PERMIT_SETTLE_OFFER_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    WRON(overrides?: CallOverrides): Promise<string>;

    WRON_HELPER(overrides?: CallOverrides): Promise<string>;

    cancelOffersAt(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    fulfillOrder(
      offer: OfferStruct,
      order: OrderStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommissionContract(overrides?: CallOverrides): Promise<string>;

    getFulfillmentInfo(
      offerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ICollectionOffer.FulfillmentInfoStructOutput>;

    getLockingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMasterNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyRegistry(overrides?: CallOverrides): Promise<string>;

    getStateOf(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: PromiseOrValue<string>,
      commissionContract: PromiseOrValue<string>,
      lockingPeriod: PromiseOrValue<BigNumberish>,
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    invalidateUnorderedNonce(
      wordPos: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isUsedNonce(
      from: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    rejectBatchOrders(
      offers: OfferStruct[],
      orders: OrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    rejectOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseNonLockingOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBatchOffers(
      params: ICollectionOffer.OfferSettlementParamStruct[],
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOffer(
      param: ICollectionOffer.OfferSettlementParamStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedVerifier(overrides?: CallOverrides): Promise<string>;

    updateTrustedVerifier(
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OfferCancelled(bytes32,address,tuple)"(
      offerHash?: PromiseOrValue<BytesLike> | null,
      by?: PromiseOrValue<string> | null,
      offer?: null
    ): OfferCancelledEventFilter;
    OfferCancelled(
      offerHash?: PromiseOrValue<BytesLike> | null,
      by?: PromiseOrValue<string> | null,
      offer?: null
    ): OfferCancelledEventFilter;

    "OfferSettled(bytes32,address,tuple,uint256[],uint256[])"(
      offerHash?: PromiseOrValue<BytesLike> | null,
      by?: PromiseOrValue<string> | null,
      offer?: null,
      ids?: null,
      amounts?: null
    ): OfferSettledEventFilter;
    OfferSettled(
      offerHash?: PromiseOrValue<BytesLike> | null,
      by?: PromiseOrValue<string> | null,
      offer?: null,
      ids?: null,
      amounts?: null
    ): OfferSettledEventFilter;

    "OrderFulfilled(bytes32,tuple,tuple,tuple[],uint256)"(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      recipients?: null,
      newFulfilledAmount?: null
    ): OrderFulfilledEventFilter;
    OrderFulfilled(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      recipients?: null,
      newFulfilledAmount?: null
    ): OrderFulfilledEventFilter;

    "OrderLocked(bytes32,tuple,tuple,uint256)"(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      newLockedAmount?: null
    ): OrderLockedEventFilter;
    OrderLocked(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      newLockedAmount?: null
    ): OrderLockedEventFilter;

    "OrderReturned(bytes32,tuple,tuple,bool)"(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      collectionReturnSuccess?: PromiseOrValue<boolean> | null
    ): OrderReturnedEventFilter;
    OrderReturned(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      collectionReturnSuccess?: PromiseOrValue<boolean> | null
    ): OrderReturnedEventFilter;

    "OrderStateTransition(bytes32,uint8,uint8)"(
      orderHash?: PromiseOrValue<BytesLike> | null,
      from?: null,
      to?: null
    ): OrderStateTransitionEventFilter;
    OrderStateTransition(
      orderHash?: PromiseOrValue<BytesLike> | null,
      from?: null,
      to?: null
    ): OrderStateTransitionEventFilter;

    "OrderUnlocked(bytes32,tuple,tuple,uint256)"(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      newLockedAmount?: null
    ): OrderUnlockedEventFilter;
    OrderUnlocked(
      offerHash?: PromiseOrValue<BytesLike> | null,
      offer?: null,
      order?: null,
      newLockedAmount?: null
    ): OrderUnlockedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "RoyaltyRegistryUpdated(address)"(
      royaltyRegistry?: null
    ): RoyaltyRegistryUpdatedEventFilter;
    RoyaltyRegistryUpdated(
      royaltyRegistry?: null
    ): RoyaltyRegistryUpdatedEventFilter;

    "TrustedVerifierUpdated(address,address)"(
      by?: PromiseOrValue<string> | null,
      newVerifier?: PromiseOrValue<string> | null
    ): TrustedVerifierUpdatedEventFilter;
    TrustedVerifierUpdated(
      by?: PromiseOrValue<string> | null,
      newVerifier?: PromiseOrValue<string> | null
    ): TrustedVerifierUpdatedEventFilter;

    "UnorderedNonceInvalidation(address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      word?: null,
      mask?: null
    ): UnorderedNonceInvalidationEventFilter;
    UnorderedNonceInvalidation(
      owner?: PromiseOrValue<string> | null,
      word?: null,
      mask?: null
    ): UnorderedNonceInvalidationEventFilter;

    "UnorderedNonceUsed(bytes4,address,uint256)"(
      sig?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      nonce?: null
    ): UnorderedNonceUsedEventFilter;
    UnorderedNonceUsed(
      sig?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      nonce?: null
    ): UnorderedNonceUsedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GAS_FOR_NATIVE_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_FULFILL_ORDER_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERMIT_SETTLE_OFFER_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WRON(overrides?: CallOverrides): Promise<BigNumber>;

    WRON_HELPER(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOffersAt(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillOrder(
      offer: OfferStruct,
      order: OrderStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommissionContract(overrides?: CallOverrides): Promise<BigNumber>;

    getFulfillmentInfo(
      offerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMasterNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getStateOf(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: PromiseOrValue<string>,
      commissionContract: PromiseOrValue<string>,
      lockingPeriod: PromiseOrValue<BigNumberish>,
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invalidateUnorderedNonce(
      wordPos: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUsedNonce(
      from: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectBatchOrders(
      offers: OfferStruct[],
      orders: OrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    releaseNonLockingOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBatchOffers(
      params: ICollectionOffer.OfferSettlementParamStruct[],
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleOffer(
      param: ICollectionOffer.OfferSettlementParamStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    updateTrustedVerifier(
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GAS_FOR_NATIVE_TRANSFER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_FULFILL_ORDER_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_SETTLE_BATCH_OFFERS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_SETTLE_OFFER_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WRON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRON_HELPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOffersAt(
      nonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillOrder(
      offer: OfferStruct,
      order: OrderStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommissionContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFulfillmentInfo(
      offerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMasterNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOf(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      commissionContract: PromiseOrValue<string>,
      lockingPeriod: PromiseOrValue<BigNumberish>,
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invalidateUnorderedNonce(
      wordPos: PromiseOrValue<BigNumberish>,
      mask: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUsedNonce(
      from: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectBatchOrders(
      offers: OfferStruct[],
      orders: OrderStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    releaseNonLockingOrder(
      offer: OfferStruct,
      order: OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBatchOffers(
      params: ICollectionOffer.OfferSettlementParamStruct[],
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleOffer(
      param: ICollectionOffer.OfferSettlementParamStruct,
      nonce: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      verifierSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTrustedVerifier(
      trustedVerifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
