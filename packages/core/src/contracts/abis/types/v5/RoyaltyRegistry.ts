/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type FeeDistributionStruct = {
  recipient: PromiseOrValue<string>;
  bps: PromiseOrValue<BigNumberish>;
};

export type FeeDistributionStructOutput = [string, number] & {
  recipient: string;
  bps: number;
};

export type FeeSettingsStruct = {
  feeDists: FeeDistributionStruct[];
  exists: PromiseOrValue<boolean>;
};

export type FeeSettingsStructOutput = [
  FeeDistributionStructOutput[],
  boolean
] & { feeDists: FeeDistributionStructOutput[]; exists: boolean };

export type RecipientStruct = {
  recipient: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type RecipientStructOutput = [string, BigNumber] & {
  recipient: string;
  amount: BigNumber;
};

export interface RoyaltyRegistryInterface extends utils.Interface {
  functions: {
    "BASIC_POINT()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "PLATFORM_BPS_CAP()": FunctionFragment;
    "ROYALTY_BPS_CAP()": FunctionFragment;
    "deletePlatformFee(address,address)": FunctionFragment;
    "deleteRoyaltyFee(address)": FunctionFragment;
    "getPlatformAndRoyaltyFees(address,uint256,uint256,bool)": FunctionFragment;
    "getPlatformFeeSettings(address,address)": FunctionFragment;
    "getPlatformFees(address,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoyaltyFeeSettings(address)": FunctionFragment;
    "getRoyaltyFees(address,uint256,uint256,bool)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address[],address[],address[],tuple[][])": FunctionFragment;
    "lookupRoyaltyAddress(address)": FunctionFragment;
    "overrideRoyaltyFee(address,(address,uint16)[])": FunctionFragment;
    "registerRoyaltyAddress(address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tryGetPlatformAndRoyaltyFees(address,address,uint256,uint256,bool)": FunctionFragment;
    "updatePlatformFees(address,address,(address,uint16)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIC_POINT"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "PLATFORM_BPS_CAP"
      | "ROYALTY_BPS_CAP"
      | "deletePlatformFee"
      | "deleteRoyaltyFee"
      | "getPlatformAndRoyaltyFees"
      | "getPlatformFeeSettings"
      | "getPlatformFees"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoyaltyFeeSettings"
      | "getRoyaltyFees"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "lookupRoyaltyAddress"
      | "overrideRoyaltyFee"
      | "registerRoyaltyAddress"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "tryGetPlatformAndRoyaltyFees"
      | "updatePlatformFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIC_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_BPS_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_BPS_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlatformFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRoyaltyFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformAndRoyaltyFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFeeSettings",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFeeSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      FeeDistributionStruct[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lookupRoyaltyAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "overrideRoyaltyFee",
    values: [PromiseOrValue<string>, FeeDistributionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRoyaltyAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tryGetPlatformAndRoyaltyFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      FeeDistributionStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIC_POINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_BPS_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_BPS_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformAndRoyaltyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFeeSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFeeSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lookupRoyaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRoyaltyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryGetPlatformAndRoyaltyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFees",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "PlatformFeeUpdated(address,address,tuple)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoyaltyAddressLookupRegistered(address,address,address)": EventFragment;
    "RoyaltyFeeUpdated(address,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoyaltyAddressLookupRegistered"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyFeeUpdated"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PlatformFeeUpdatedEventObject {
  platform: string;
  collection: string;
  settings: FeeSettingsStructOutput;
}
export type PlatformFeeUpdatedEvent = TypedEvent<
  [string, string, FeeSettingsStructOutput],
  PlatformFeeUpdatedEventObject
>;

export type PlatformFeeUpdatedEventFilter =
  TypedEventFilter<PlatformFeeUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoyaltyAddressLookupRegisteredEventObject {
  collection: string;
  royaltyAddress: string;
  by: string;
}
export type RoyaltyAddressLookupRegisteredEvent = TypedEvent<
  [string, string, string],
  RoyaltyAddressLookupRegisteredEventObject
>;

export type RoyaltyAddressLookupRegisteredEventFilter =
  TypedEventFilter<RoyaltyAddressLookupRegisteredEvent>;

export interface RoyaltyFeeUpdatedEventObject {
  collection: string;
  by: string;
  settings: FeeSettingsStructOutput;
}
export type RoyaltyFeeUpdatedEvent = TypedEvent<
  [string, string, FeeSettingsStructOutput],
  RoyaltyFeeUpdatedEventObject
>;

export type RoyaltyFeeUpdatedEventFilter =
  TypedEventFilter<RoyaltyFeeUpdatedEvent>;

export interface RoyaltyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoyaltyRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIC_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PLATFORM_BPS_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROYALTY_BPS_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    deletePlatformFee(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteRoyaltyFee(
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPlatformAndRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [RecipientStructOutput[]] & { recipients: RecipientStructOutput[] }
    >;

    getPlatformFeeSettings(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [FeeSettingsStructOutput] & { settings: FeeSettingsStructOutput }
    >;

    getPlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [RecipientStructOutput[]] & { recipients: RecipientStructOutput[] }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoyaltyFeeSettings(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [FeeSettingsStructOutput] & { settings: FeeSettingsStructOutput }
    >;

    getRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [RecipientStructOutput[]] & { recipients: RecipientStructOutput[] }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      platforms: PromiseOrValue<string>[],
      collections: PromiseOrValue<string>[],
      feeDists: FeeDistributionStruct[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lookupRoyaltyAddress(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    overrideRoyaltyFee(
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRoyaltyAddress(
      collection: PromiseOrValue<string>,
      royaltyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tryGetPlatformAndRoyaltyFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [RecipientStructOutput[]] & { recipients: RecipientStructOutput[] }
    >;

    updatePlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIC_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  PLATFORM_BPS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  ROYALTY_BPS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  deletePlatformFee(
    platform: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteRoyaltyFee(
    collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPlatformAndRoyaltyFees(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    fallbackERC2981: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<RecipientStructOutput[]>;

  getPlatformFeeSettings(
    platform: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FeeSettingsStructOutput>;

  getPlatformFees(
    platform: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RecipientStructOutput[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoyaltyFeeSettings(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FeeSettingsStructOutput>;

  getRoyaltyFees(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    fallbackERC2981: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<RecipientStructOutput[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: PromiseOrValue<string>,
    operators: PromiseOrValue<string>[],
    platforms: PromiseOrValue<string>[],
    collections: PromiseOrValue<string>[],
    feeDists: FeeDistributionStruct[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lookupRoyaltyAddress(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  overrideRoyaltyFee(
    collection: PromiseOrValue<string>,
    feeDist: FeeDistributionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRoyaltyAddress(
    collection: PromiseOrValue<string>,
    royaltyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tryGetPlatformAndRoyaltyFees(
    platform: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    fallbackERC2981: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<RecipientStructOutput[]>;

  updatePlatformFees(
    platform: PromiseOrValue<string>,
    collection: PromiseOrValue<string>,
    feeDist: FeeDistributionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIC_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    PLATFORM_BPS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    ROYALTY_BPS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    deletePlatformFee(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteRoyaltyFee(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPlatformAndRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<RecipientStructOutput[]>;

    getPlatformFeeSettings(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FeeSettingsStructOutput>;

    getPlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RecipientStructOutput[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyFeeSettings(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FeeSettingsStructOutput>;

    getRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<RecipientStructOutput[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      platforms: PromiseOrValue<string>[],
      collections: PromiseOrValue<string>[],
      feeDists: FeeDistributionStruct[][],
      overrides?: CallOverrides
    ): Promise<void>;

    lookupRoyaltyAddress(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    overrideRoyaltyFee(
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerRoyaltyAddress(
      collection: PromiseOrValue<string>,
      royaltyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tryGetPlatformAndRoyaltyFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<RecipientStructOutput[]>;

    updatePlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PlatformFeeUpdated(address,address,tuple)"(
      platform?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      settings?: null
    ): PlatformFeeUpdatedEventFilter;
    PlatformFeeUpdated(
      platform?: PromiseOrValue<string> | null,
      collection?: PromiseOrValue<string> | null,
      settings?: null
    ): PlatformFeeUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "RoyaltyAddressLookupRegistered(address,address,address)"(
      collection?: PromiseOrValue<string> | null,
      royaltyAddress?: PromiseOrValue<string> | null,
      by?: PromiseOrValue<string> | null
    ): RoyaltyAddressLookupRegisteredEventFilter;
    RoyaltyAddressLookupRegistered(
      collection?: PromiseOrValue<string> | null,
      royaltyAddress?: PromiseOrValue<string> | null,
      by?: PromiseOrValue<string> | null
    ): RoyaltyAddressLookupRegisteredEventFilter;

    "RoyaltyFeeUpdated(address,address,tuple)"(
      collection?: PromiseOrValue<string> | null,
      by?: PromiseOrValue<string> | null,
      settings?: null
    ): RoyaltyFeeUpdatedEventFilter;
    RoyaltyFeeUpdated(
      collection?: PromiseOrValue<string> | null,
      by?: PromiseOrValue<string> | null,
      settings?: null
    ): RoyaltyFeeUpdatedEventFilter;
  };

  estimateGas: {
    BASIC_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_BPS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    ROYALTY_BPS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    deletePlatformFee(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteRoyaltyFee(
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPlatformAndRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformFeeSettings(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyFeeSettings(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      platforms: PromiseOrValue<string>[],
      collections: PromiseOrValue<string>[],
      feeDists: FeeDistributionStruct[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lookupRoyaltyAddress(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overrideRoyaltyFee(
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRoyaltyAddress(
      collection: PromiseOrValue<string>,
      royaltyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tryGetPlatformAndRoyaltyFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIC_POINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM_BPS_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROYALTY_BPS_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deletePlatformFee(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteRoyaltyFee(
      collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPlatformAndRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFeeSettings(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyFeeSettings(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyFees(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      operators: PromiseOrValue<string>[],
      platforms: PromiseOrValue<string>[],
      collections: PromiseOrValue<string>[],
      feeDists: FeeDistributionStruct[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lookupRoyaltyAddress(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideRoyaltyFee(
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRoyaltyAddress(
      collection: PromiseOrValue<string>,
      royaltyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryGetPlatformAndRoyaltyFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      fallbackERC2981: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePlatformFees(
      platform: PromiseOrValue<string>,
      collection: PromiseOrValue<string>,
      feeDist: FeeDistributionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
