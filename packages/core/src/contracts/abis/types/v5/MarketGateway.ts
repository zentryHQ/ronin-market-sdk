/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MarketGatewayInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "WRON()": FunctionFragment;
    "allowedAllPaymentTokens()": FunctionFragment;
    "allowedPaymentToken(address)": FunctionFragment;
    "getInterface(string)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getRoyaltyRegistry()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "incrementNonceMaker()": FunctionFragment;
    "initialize(address,address,bool,bool,address,bool,address[],string[],address[][2])": FunctionFragment;
    "initializeV2(address,string[],address[])": FunctionFragment;
    "interactWith(string,bytes)": FunctionFragment;
    "makerNonce(address)": FunctionFragment;
    "orderFinalized(bytes32)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowedAllPaymentTokens(bool)": FunctionFragment;
    "setInterfaces(string[],address[])": FunctionFragment;
    "setKatanaRouter(address)": FunctionFragment;
    "setPaymentTokens(address[],bool)": FunctionFragment;
    "setRoyaltyRegistry(address)": FunctionFragment;
    "setWRONConfig(address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "wronHelper()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "WRON"
      | "allowedAllPaymentTokens"
      | "allowedPaymentToken"
      | "getInterface"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoyaltyRegistry"
      | "grantRole"
      | "hasRole"
      | "incrementNonceMaker"
      | "initialize"
      | "initializeV2"
      | "interactWith"
      | "makerNonce"
      | "orderFinalized"
      | "renounceRole"
      | "revokeRole"
      | "setAllowedAllPaymentTokens"
      | "setInterfaces"
      | "setKatanaRouter"
      | "setPaymentTokens"
      | "setRoyaltyRegistry"
      | "setWRONConfig"
      | "supportsInterface"
      | "wronHelper"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WRON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedAllPaymentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedPaymentToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterface",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonceMaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      [PromiseOrValue<string>[], PromiseOrValue<string>[]]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interactWith",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "makerNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderFinalized",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedAllPaymentTokens",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterfaces",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setKatanaRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWRONConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "wronHelper",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WRON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAllPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonceMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interactWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makerNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedAllPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKatanaRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWRONConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wronHelper", data: BytesLike): Result;

  events: {
    "AllowedAllPaymentTokens(bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InterfacesUpdated(string[],address[])": EventFragment;
    "KatanaRouterUpdated(address)": EventFragment;
    "MakerNonceUpdated(address,uint256)": EventFragment;
    "MinMarketFeePercentageUpdated(uint256)": EventFragment;
    "PaymentTokensAllowed(address[],bool)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoyaltyRegistryUpdated(address)": EventFragment;
    "TreasuryUpdated(address)": EventFragment;
    "WRONConfigUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowedAllPaymentTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfacesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KatanaRouterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerNonceUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinMarketFeePercentageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokensAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyRegistryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WRONConfigUpdated"): EventFragment;
}

export interface AllowedAllPaymentTokensEventObject {
  arg0: boolean;
}
export type AllowedAllPaymentTokensEvent = TypedEvent<
  [boolean],
  AllowedAllPaymentTokensEventObject
>;

export type AllowedAllPaymentTokensEventFilter =
  TypedEventFilter<AllowedAllPaymentTokensEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterfacesUpdatedEventObject {
  interfaces: string[];
  addresses: string[];
}
export type InterfacesUpdatedEvent = TypedEvent<
  [string[], string[]],
  InterfacesUpdatedEventObject
>;

export type InterfacesUpdatedEventFilter =
  TypedEventFilter<InterfacesUpdatedEvent>;

export interface KatanaRouterUpdatedEventObject {
  KatanaRouterContract: string;
}
export type KatanaRouterUpdatedEvent = TypedEvent<
  [string],
  KatanaRouterUpdatedEventObject
>;

export type KatanaRouterUpdatedEventFilter =
  TypedEventFilter<KatanaRouterUpdatedEvent>;

export interface MakerNonceUpdatedEventObject {
  maker: string;
  nonce: BigNumber;
}
export type MakerNonceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  MakerNonceUpdatedEventObject
>;

export type MakerNonceUpdatedEventFilter =
  TypedEventFilter<MakerNonceUpdatedEvent>;

export interface MinMarketFeePercentageUpdatedEventObject {
  minMarketFeePercentage: BigNumber;
}
export type MinMarketFeePercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  MinMarketFeePercentageUpdatedEventObject
>;

export type MinMarketFeePercentageUpdatedEventFilter =
  TypedEventFilter<MinMarketFeePercentageUpdatedEvent>;

export interface PaymentTokensAllowedEventObject {
  tokens: string[];
  allowed: boolean;
}
export type PaymentTokensAllowedEvent = TypedEvent<
  [string[], boolean],
  PaymentTokensAllowedEventObject
>;

export type PaymentTokensAllowedEventFilter =
  TypedEventFilter<PaymentTokensAllowedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RoyaltyRegistryUpdatedEventObject {
  royaltyRegistry: string;
}
export type RoyaltyRegistryUpdatedEvent = TypedEvent<
  [string],
  RoyaltyRegistryUpdatedEventObject
>;

export type RoyaltyRegistryUpdatedEventFilter =
  TypedEventFilter<RoyaltyRegistryUpdatedEvent>;

export interface TreasuryUpdatedEventObject {
  arg0: string;
}
export type TreasuryUpdatedEvent = TypedEvent<
  [string],
  TreasuryUpdatedEventObject
>;

export type TreasuryUpdatedEventFilter = TypedEventFilter<TreasuryUpdatedEvent>;

export interface WRONConfigUpdatedEventObject {
  wronContract: string;
  wronHelper: string;
}
export type WRONConfigUpdatedEvent = TypedEvent<
  [string, string],
  WRONConfigUpdatedEventObject
>;

export type WRONConfigUpdatedEventFilter =
  TypedEventFilter<WRONConfigUpdatedEvent>;

export interface MarketGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    WRON(overrides?: CallOverrides): Promise<[string]>;

    allowedAllPaymentTokens(overrides?: CallOverrides): Promise<[boolean]>;

    allowedPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getInterface(
      interfaceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoyaltyRegistry(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incrementNonceMaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      wronContract: PromiseOrValue<string>,
      wronHelper: PromiseOrValue<string>,
      allowedAllPaymentTokens: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<boolean>,
      paymentTokens: PromiseOrValue<string>[],
      interfaces: PromiseOrValue<string>[],
      addresses: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      interfaces: PromiseOrValue<string>[],
      logics: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interactWith(
      interfaceName: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerNonce(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orderFinalized(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowedAllPaymentTokens(
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterfaces(
      interfaces: PromiseOrValue<string>[],
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKatanaRouter(
      routerContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentTokens(
      tokens: PromiseOrValue<string>[],
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyRegistry(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWRONConfig(
      wronAddr: PromiseOrValue<string>,
      wronHelperAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    wronHelper(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  WRON(overrides?: CallOverrides): Promise<string>;

  allowedAllPaymentTokens(overrides?: CallOverrides): Promise<boolean>;

  allowedPaymentToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getInterface(
    interfaceName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoyaltyRegistry(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incrementNonceMaker(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    wronContract: PromiseOrValue<string>,
    wronHelper: PromiseOrValue<string>,
    allowedAllPaymentTokens: PromiseOrValue<boolean>,
    arg3: PromiseOrValue<boolean>,
    arg4: PromiseOrValue<string>,
    arg5: PromiseOrValue<boolean>,
    paymentTokens: PromiseOrValue<string>[],
    interfaces: PromiseOrValue<string>[],
    addresses: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeV2(
    royaltyRegistry: PromiseOrValue<string>,
    interfaces: PromiseOrValue<string>[],
    logics: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interactWith(
    interfaceName: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerNonce(
    maker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orderFinalized(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowedAllPaymentTokens(
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterfaces(
    interfaces: PromiseOrValue<string>[],
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKatanaRouter(
    routerContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentTokens(
    tokens: PromiseOrValue<string>[],
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyRegistry(
    royaltyRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWRONConfig(
    wronAddr: PromiseOrValue<string>,
    wronHelperAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wronHelper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    WRON(overrides?: CallOverrides): Promise<string>;

    allowedAllPaymentTokens(overrides?: CallOverrides): Promise<boolean>;

    allowedPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getInterface(
      interfaceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyRegistry(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incrementNonceMaker(overrides?: CallOverrides): Promise<void>;

    initialize(
      wronContract: PromiseOrValue<string>,
      wronHelper: PromiseOrValue<string>,
      allowedAllPaymentTokens: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<boolean>,
      paymentTokens: PromiseOrValue<string>[],
      interfaces: PromiseOrValue<string>[],
      addresses: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      interfaces: PromiseOrValue<string>[],
      logics: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    interactWith(
      interfaceName: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    makerNonce(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderFinalized(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedAllPaymentTokens(
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterfaces(
      interfaces: PromiseOrValue<string>[],
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKatanaRouter(
      routerContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTokens(
      tokens: PromiseOrValue<string>[],
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyRegistry(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWRONConfig(
      wronAddr: PromiseOrValue<string>,
      wronHelperAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wronHelper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AllowedAllPaymentTokens(bool)"(
      arg0?: null
    ): AllowedAllPaymentTokensEventFilter;
    AllowedAllPaymentTokens(arg0?: null): AllowedAllPaymentTokensEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterfacesUpdated(string[],address[])"(
      interfaces?: null,
      addresses?: null
    ): InterfacesUpdatedEventFilter;
    InterfacesUpdated(
      interfaces?: null,
      addresses?: null
    ): InterfacesUpdatedEventFilter;

    "KatanaRouterUpdated(address)"(
      KatanaRouterContract?: null
    ): KatanaRouterUpdatedEventFilter;
    KatanaRouterUpdated(
      KatanaRouterContract?: null
    ): KatanaRouterUpdatedEventFilter;

    "MakerNonceUpdated(address,uint256)"(
      maker?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): MakerNonceUpdatedEventFilter;
    MakerNonceUpdated(
      maker?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): MakerNonceUpdatedEventFilter;

    "MinMarketFeePercentageUpdated(uint256)"(
      minMarketFeePercentage?: null
    ): MinMarketFeePercentageUpdatedEventFilter;
    MinMarketFeePercentageUpdated(
      minMarketFeePercentage?: null
    ): MinMarketFeePercentageUpdatedEventFilter;

    "PaymentTokensAllowed(address[],bool)"(
      tokens?: null,
      allowed?: null
    ): PaymentTokensAllowedEventFilter;
    PaymentTokensAllowed(
      tokens?: null,
      allowed?: null
    ): PaymentTokensAllowedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "RoyaltyRegistryUpdated(address)"(
      royaltyRegistry?: null
    ): RoyaltyRegistryUpdatedEventFilter;
    RoyaltyRegistryUpdated(
      royaltyRegistry?: null
    ): RoyaltyRegistryUpdatedEventFilter;

    "TreasuryUpdated(address)"(arg0?: null): TreasuryUpdatedEventFilter;
    TreasuryUpdated(arg0?: null): TreasuryUpdatedEventFilter;

    "WRONConfigUpdated(address,address)"(
      wronContract?: null,
      wronHelper?: null
    ): WRONConfigUpdatedEventFilter;
    WRONConfigUpdated(
      wronContract?: null,
      wronHelper?: null
    ): WRONConfigUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    WRON(overrides?: CallOverrides): Promise<BigNumber>;

    allowedAllPaymentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    allowedPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterface(
      interfaceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoyaltyRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementNonceMaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      wronContract: PromiseOrValue<string>,
      wronHelper: PromiseOrValue<string>,
      allowedAllPaymentTokens: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<boolean>,
      paymentTokens: PromiseOrValue<string>[],
      interfaces: PromiseOrValue<string>[],
      addresses: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      interfaces: PromiseOrValue<string>[],
      logics: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interactWith(
      interfaceName: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerNonce(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderFinalized(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowedAllPaymentTokens(
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterfaces(
      interfaces: PromiseOrValue<string>[],
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKatanaRouter(
      routerContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentTokens(
      tokens: PromiseOrValue<string>[],
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltyRegistry(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWRONConfig(
      wronAddr: PromiseOrValue<string>,
      wronHelperAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wronHelper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedAllPaymentTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedPaymentToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterface(
      interfaceName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoyaltyRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementNonceMaker(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      wronContract: PromiseOrValue<string>,
      wronHelper: PromiseOrValue<string>,
      allowedAllPaymentTokens: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      arg4: PromiseOrValue<string>,
      arg5: PromiseOrValue<boolean>,
      paymentTokens: PromiseOrValue<string>[],
      interfaces: PromiseOrValue<string>[],
      addresses: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      royaltyRegistry: PromiseOrValue<string>,
      interfaces: PromiseOrValue<string>[],
      logics: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interactWith(
      interfaceName: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerNonce(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderFinalized(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedAllPaymentTokens(
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterfaces(
      interfaces: PromiseOrValue<string>[],
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKatanaRouter(
      routerContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTokens(
      tokens: PromiseOrValue<string>[],
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyRegistry(
      royaltyRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWRONConfig(
      wronAddr: PromiseOrValue<string>,
      wronHelperAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wronHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
